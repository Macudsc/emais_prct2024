// ci_cd/Jenkins/pipeline.jenkinsfile
pipeline {
  agent any
  environment {
    DOCKER_CREDS = 'dockerhub-credentials-id'
    TG_BOT_TOKEN = credentials('telegram-bot-token')
    KUBECONFIG_FILE = '/tmp/kubeconfig' // Путь к kubeconfig на Jenkins-node
    CLOUD_ID = credentials('yandex-cloud-id') // Jenkins credential для cloud_id
    FOLDER_ID = credentials('yandex-folder-id') // Jenkins credential для folder_id
    YC_TOKEN = credentials('yandex-token') // Jenkins credential для токена Яндекса
    MASTER_IP = ""  // Заполнится значением из вывода Terraform
    WORKER_IP = ""  // Заполнится значением из вывода Terraform
  }
  stages {
    stage('Checkout github') {
      steps {
        git branch: 'dev', url: 'https://github.com/Macudsc/emais_prct2024.git'
      }
    }
    stage('Prepare tg bot token') {
      steps {
        sh "echo \"tokenn='${TG_BOT_TOKEN}'\" >> Emais/sensetiv.py"
      }
    }
    stage('Generate creds.tfvars') {
      steps {
        script {
          sh """
            echo 'cloud_id  = "${CLOUD_ID}"' > ci_cd/Terraform/creds.tfvars
            echo 'folder_id = "${FOLDER_ID}"' >> ci_cd/Terraform/creds.tfvars
            echo 'token     = "${YC_TOKEN}"' >> ci_cd/Terraform/creds.tfvars
          """
        }
      }
    }

    stage('Generate cloud-config') {
      steps {
        withCredentials([string(credentialsId: 'terraform-ssh-pubkey', variable: 'SSH_PUBKEY')]) {
          script {
            def sshPubKey = "${SSH_PUBKEY}".trim()
            sh """
              sed 's|{{ ssh_key }}|${sshPubKey}|' ci_cd/Terraform/cloud-config > ci_cd/Terraform/cloud-config-gen
            """
          }
        }
      }
    }
    stage('Install and Use yc CLI') {
      steps {
        sh '''
          curl -sL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          export PATH=$PATH:/home/jenkins/yandex-cloud/bin
          echo "PATH=$PATH"
          yc vpc network list --format json
          yc vpc subnet list --format json
          yc vpc address list --format json
        '''
      }
    }

    stage('Check Existing Infrastructure') {
        steps {
            withEnv(["PATH+YC=/home/jenkins/yandex-cloud/bin"]) {
                script {
                    def networks = sh(script: 'yc vpc network list --format json', returnStdout: true).trim()
                    def subnets = sh(script: 'yc vpc subnet list --format json', returnStdout: true).trim()

                    if (networks || subnets) {
                        echo 'Existing infrastructure found. Skipping creation steps...'
                        env.INFRA_EXISTS = 'true'
                    } else {
                        echo 'No existing infrastructure found. Proceeding with creation...'
                        env.INFRA_EXISTS = 'false'
                    }
                }
            }
        }
    }
    stage('Plan Infrastructure') {
        when {
            expression { return env.INFRA_EXISTS == 'false' }
        }
        steps {
            script {
                dir('ci_cd/Terraform') {
                    sh 'terraform init'
                    sh 'terraform plan -var-file="vars.tfvars" -var-file="creds.tfvars" -out=tfplan'
                }
            }
        }
    }
    stage('Apply Infrastructure') {
        when {
            expression { return env.INFRA_EXISTS == 'false' }
        }
        steps {
            script {
                dir('ci_cd/Terraform') {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }
    }
    stage('Fetch VM IPs') {
        steps {
            script {
                if (env.INFRA_EXISTS == 'false') {
                    dir('ci_cd/Terraform') {
                        def masterIp = sh(script: 'terraform output -raw master_ip', returnStdout: true).trim()
                        def workerIp = sh(script: 'terraform output -raw worker_ip', returnStdout: true).trim()

                        writeFile(file: 'master_ip.txt', text: masterIp)
                        writeFile(file: 'worker_ip.txt', text: workerIp)

                        echo "Master IP: ${masterIp}, Worker IP: ${workerIp}"
                    }
                } else {
                    withEnv(["PATH+YC=/home/jenkins/yandex-cloud/bin"]) {
                        // Получаем JSON
                        def jsonOutput = sh(script: 'yc compute instance list --format json', returnStdout: true).trim()
                        echo "JSON Output: ${jsonOutput}"

                        // IP для master
                        def masterIp = sh(script: """
                            echo '${jsonOutput}' | jq -r '.[] | select(.name == "k8s-master-0") | .network_interfaces[].primary_v4_address.one_to_one_nat.address'
                        """, returnStdout: true).trim()
                        echo "Master IP: ${masterIp}"

                        // IP для worker
                        def workerIp = sh(script: """
                            echo '${jsonOutput}' | jq -r '.[] | select(.name == "k8s-worker-0") | .network_interfaces[].primary_v4_address.one_to_one_nat.address'
                        """, returnStdout: true).trim()
                        echo "Worker IP: ${workerIp}"

                        // Сохраняем IP в файлы
                        writeFile(file: 'master_ip.txt', text: masterIp)
                        writeFile(file: 'worker_ip.txt', text: workerIp)
                    }
                }

                // Чтение IP из файлов
                env.MASTER_IP = readFile('master_ip.txt').trim()
                env.WORKER_IP = readFile('worker_ip.txt').trim()

                echo "Existing Master IP: ${MASTER_IP}, Existing Worker IP: ${WORKER_IP}"
            }
        }
    }
    //===

    stage('Deploy VM Setup') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'vm-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
          script {
            ansiblePlaybook(
              playbook: 'ci_cd/Ansible/vm_setup.yml',
              inventory: "${MASTER_IP},${WORKER_IP},",
              extras: "-e ansible_user=${SSH_USER} -e ansible_ssh_private_key_file=${SSH_KEY}"
            )
          }
        }
      }
    }
    stage('Install Kubernetes with Kubespray') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'vm-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
          script {
            ansiblePlaybook(
              playbook: 'ci_cd/Ansible/kubespray_setup.yml',
              inventory: "${MASTER_IP},${WORKER_IP},",
              extras: "-e master_ip=${MASTER_IP} -e worker_ip=${WORKER_IP} -e ansible_user=root -e ansible_ssh_private_key_file=${SSH_KEY}"
            )
          }
        }
      }
    }
    stage('Fetch and Replace kubeconfig') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'vm-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
          script {
            sh """
              scp -i ${SSH_KEY} ${SSH_USER}@${MASTER_IP}:/root/.kube/config /tmp/kubeconfig
            """
            sh """
              sed -i 's|https://127.0.0.1:6443|https://${MASTER_IP}:6443|g' /tmp/kubeconfig
            """
          }
        }
      }
    }
    stage('Deploy to K8s') {
      steps {
        script {
          sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'
          sh 'chmod u+x ./kubectl'  
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/namespace.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/postgres-pvc.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/postgres-deployment.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/mongo-pvc.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/mongo-deployment.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/app-deployment.yml"
        }
      }
    }

    //stage('Build Docker Image PIPELINE') {
    //  steps {
    //    script {
    //      docker.build('komapolson/emais-app:latest')
    //    }
    //  }
    //}
    //stage('Push Docker Image') {
    //  steps {
    //    script {
    //      withDockerRegistry([credentialsId: DOCKER_CREDS, url: 'https://index.docker.io/v1/']) {
    //        docker.image('komapolson/emais-app:latest').push('latest')
    //      }
    //    }
    //  }
    //}

    //stage('Docker image remove') {
    //  steps {
    //    script {
    //      sh "docker rmi komapolson/emais-app:latest || true"
    //    }
    //  }
    //}
  }
  post {
    always {
      cleanWs()
    }
  }
}
