// ci_cd/Jenkins/pipeline.jenkinsfile
pipeline {
    agent any
    environment {
        DOCKER_CREDS = 'dockerhub-credentials-id'
        TG_BOT_TOKEN = credentials('telegram-bot-token')
        KUBECONFIG_FILE = '/tmp/kubeconfig'
        CLOUD_ID = credentials('yandex-cloud-id')
        FOLDER_ID = credentials('yandex-folder-id')
        YC_TOKEN = credentials('yandex-token')
        PATH = "${env.PATH}:/home/jenkins/yandex-cloud/bin" // Добавляем путь к yc CLI
  }
  stages {
    stage('Checkout github') {
      steps {
        git branch: 'dev', url: 'https://github.com/Macudsc/emais_prct2024.git'
      }
    }
    stage('Prepare tg bot token') {
      steps {
        sh "echo \"tokenn='${TG_BOT_TOKEN}'\" >> Emais/sensetiv.py"
      }
    }
    stage('Generate creds.tfvars') {
      steps {
        script {
          sh """
            echo 'cloud_id  = "${CLOUD_ID}"' > ci_cd/Terraform/creds.tfvars
            echo 'folder_id = "${FOLDER_ID}"' >> ci_cd/Terraform/creds.tfvars
            echo 'token     = "${YC_TOKEN}"' >> ci_cd/Terraform/creds.tfvars
          """
        }
      }
    }
    // Стадия создания клауд-конфига
    stage('Generate cloud-config') {
        steps {
            withCredentials([string(credentialsId: 'terraform-ssh-pubkey', variable: 'SSH_PUBKEY')]) {
                script {
                    def sshPubKey = "${SSH_PUBKEY}".trim()
                    sh """
                      sed 's|{{ ssh_key }}|${sshPubKey}|' ci_cd/Terraform/cloud-config > ci_cd/Terraform/cloud-config-gen
                    """
                    sh "mv ci_cd/Terraform/cloud-config-gen ci_cd/Terraform/cloud-config"
                }
            }
        }
    }
    stage('Install and Use yc CLI') {
      steps {
        sh '''
          curl -sL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          export PATH=$PATH:/home/jenkins/yandex-cloud/bin
          echo "PATH=$PATH"
          yc vpc network list --format json
          yc vpc subnet list --format json
          yc vpc address list --format json
        '''
      }
    }

    stage('Check Existing Infrastructure') {
        steps {
            withEnv(["PATH+YC=/home/jenkins/yandex-cloud/bin"]) {
                script {
                    // Проверка наличия сети
                    def networkExists = sh(
                        script: 'yc vpc network list --format json | jq -e \'.[] | select(.name == "network1")\'',
                        returnStatus: true
                    ) == 0

                    // Проверка наличия подсети
                    def subnetExists = sh(
                        script: 'yc vpc subnet list --format json | jq -e \'.[] | select(.name == "subnet1")\'',
                        returnStatus: true
                    ) == 0

                    // Проверка наличия мастера
                    def masterExists = sh(
                        script: 'yc compute instance list --format json | jq -e \'.[] | select(.name == "k8s-master-0")\'',
                        returnStatus: true
                    ) == 0

                    // Проверка наличия воркера
                    def workerExists = sh(
                        script: 'yc compute instance list --format json | jq -e \'.[] | select(.name == "k8s-worker-0")\'',
                        returnStatus: true
                    ) == 0

                    // Если все ресурсы существуют, то пропуск создания инфраструктуры
                    if (networkExists && subnetExists && masterExists && workerExists) {
                        echo 'Инфраструктура найдена. Пропуск шагов создания...'
                        env.INFRA_EXISTS = 'true'
                    } else {
                        echo 'Инфраструктура не готова, создание заново...'
                        env.INFRA_EXISTS = 'false'
                    }
                }
            }
        }
}
    stage('Plan and Apply Infrastructure') {
        when {
            expression { return env.INFRA_EXISTS == 'false' }
        }
        steps {
            script {
                dir('ci_cd/Terraform') {
                    sh 'terraform init'
                    sh 'terraform plan -var-file=vars.tfvars -var-file=creds.tfvars -out=tfplan'
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }
    }
    stage('Fetch VM IPs') {
        steps {
            script {
                def masterIp = ""
                def workerIp = ""

                def jsonOutput = sh(script: 'yc compute instance list --format json', returnStdout: true).trim()
                //echo "JSON Output: ${jsonOutput}"

                masterIp = sh(script: """
                    echo '${jsonOutput}' | jq -r '.[] | select(.name | startswith("k8s-master-")) | .network_interfaces[0].primary_v4_address.one_to_one_nat.address'
                """, returnStdout: true).trim()
                
                workerIp = sh(script: """
                    echo '${jsonOutput}' | jq -r '.[] | select(.name | startswith("k8s-worker-")) | .network_interfaces[0].primary_v4_address.one_to_one_nat.address'
                """, returnStdout: true).trim()

                echo "Master IP from YC CLI: ${masterIp}"
                echo "Worker IP from YC CLI: ${workerIp}"

                env.MASTER_IP = masterIp
                env.WORKER_IP = workerIp

                echo "Master IP: ${env.MASTER_IP}; Worker IP: ${env.WORKER_IP}"
            }
        }
    }
    //===

    // Стадия запуска плейбука на виртуалках
    stage('Deploy VM Setup') {
        steps {
            withCredentials([sshUserPrivateKey(credentialsId: 'vm-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                script {
                    // Добавляем ключи хостов
                    if (env.INFRA_EXISTS == 'false') {
                        sh """
                            echo 'Новая инфраструктура...'
                            sleep 40
                            ssh-keyscan -H ${MASTER_IP} >> ~/.ssh/known_hosts
                            ssh-keyscan -H ${WORKER_IP} >> ~/.ssh/known_hosts
                            sleep 10
                        """
                    } else {
                        sh """
                            ssh-keyscan -H ${MASTER_IP} >> ~/.ssh/known_hosts
                            ssh-keyscan -H ${WORKER_IP} >> ~/.ssh/known_hosts
                        """
                    }

                   //sh 'cat ~/.ssh/known_hosts | tail -n 2'

                    ansiblePlaybook(
                        playbook: 'ci_cd/Ansible/vm_setup.yml',
                        inventory: "${MASTER_IP},${WORKER_IP},",
                        extras: '-e ansible_user=$SSH_USER -e ansible_ssh_private_key_file=$SSH_KEY',
                        colorized: true
                    )
                }
            }
        }
    }
    // Кубспрей на своей дженкинс ноде
    stage('Install Kubernetes with Kubespray') {
        steps {
            withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-node-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                script {
                    ansiblePlaybook(
                        playbook: 'ci_cd/Ansible/kubespray_setup.yml',
                        inventory: "localhost",
                        extras: "-e ansible_user=${SSH_USER} -e ansible_ssh_private_key_file=${SSH_KEY} -e master_ip=${MASTER_IP} -e worker_ip=${WORKER_IP} -v"
                    )
                }
            }
        }
    }

    stage('Configure StorageClass') {
        steps {
            withCredentials([sshUserPrivateKey(credentialsId: 'vm-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER'),
            sshUserPrivateKey(credentialsId: 'vm-ssh-key', keyFileVariable: 'VM_SSH_KEY', usernameVariable: 'VM_SSH_USER')]) {
                script {
                    ansiblePlaybook(
                        playbook: 'ci_cd/Ansible/kubespray_setup.yml',
                        inventory: "${MASTER_IP},${WORKER_IP}",
                        extras: "--become -e ansible_user=${SSH_USER} -e ansible_ssh_private_key_file=${SSH_KEY}"
                    )
                }
            }
        }
    }

    stage('Fetch and Replace kubeconfig') {
        steps {
            withCredentials([sshUserPrivateKey(credentialsId: 'vm-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                script {
                    sh """
                        scp -i ${SSH_KEY} ${SSH_USER}@${MASTER_IP}:/home/moon/.kube/config /tmp/kubeconfig
                    """
                    sh """
                        sed -i 's|https://127.0.0.1:6443|https://${MASTER_IP}:6443|g' /tmp/kubeconfig
                    """
                }
            }
        }
    }

    //===
    stage('Deploy to K8s') {
      steps {
        script {
          sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'
          sh 'chmod u+x ./kubectl'  
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/namespace.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/postgres-pvc.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/postgres-deployment.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/mongo-pvc.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/mongo-deployment.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/app-deployment.yml"
        }
      }
    }

    //stage('Build Docker Image PIPELINE') {
    //  steps {
    //    script {
    //      docker.build('komapolson/emais-app:latest')
    //    }
    //  }
    //}
    //stage('Push Docker Image') {
    //  steps {
    //    script {
    //      withDockerRegistry([credentialsId: DOCKER_CREDS, url: 'https://index.docker.io/v1/']) {
    //        docker.image('komapolson/emais-app:latest').push('latest')
    //      }
    //    }
    //  }
    //}

    //stage('Docker image remove') {
    //  steps {
    //    script {
    //      sh "docker rmi komapolson/emais-app:latest || true"
    //    }
    //  }
    //}
  }
  post {
    always {
      cleanWs()
    }
  }
}
