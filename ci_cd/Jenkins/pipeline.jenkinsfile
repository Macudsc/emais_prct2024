// ci_cd/Jenkins/pipeline.jenkinsfile
pipeline {
  agent any
  environment {
    DOCKER_CREDS = 'dockerhub-credentials-id'
    TG_BOT_TOKEN = credentials('telegram-bot-token')
    KUBECONFIG_FILE = '/tmp/kubeconfig' // Путь к kubeconfig на Jenkins
  }
  stages {
    stage('Checkout github') {
      steps {
        git branch: 'dev', url: 'https://github.com/Macudsc/emais_prct2024.git'
      }
    }
    stage('Prepare tg bot token') {
      steps {
        sh "echo \"tokenn='${TG_BOT_TOKEN}'\" >> Emais/sensetiv.py"
      }
    }
    stage('Deploy VM Setup') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'vm-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                    ansiblePlaybook(
                        playbook: 'ci_cd/Ansible/vm_setup.yml',
                        inventory: "${params.VM_IP},",
                        extras: "-e ansible_user=${SSH_USER} -e ansible_host=${params.VM_IP} -e ansible_ssh_private_key_file=${SSH_KEY}"
                    )
                }
            }
        }
    stage('Copy private key to target') {
      steps {
        sh 'scp /home/jenkins/.ssh/id_rsa root@${params.VM_IP}:/root/.ssh/id_rsa'
      }
    }
    stage('Install Kubernetes with Kubespray') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'vm-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
          script {
            ansiblePlaybook(
              playbook: 'ci_cd/Ansible/kubespray_setup.yml',
              inventory: "${params.VM_IP},",
              extras: "-e ansible_user=${params.VM_USER} -e ansible_host=${params.VM_IP} -e ansible_ssh_private_key_file=${SSH_KEY}"
            )
          }
        }
      }
    }

    stage('Deploy to K8s') {
      steps {
        script {
          sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
          sh 'chmod u+x ./kubectl'  
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/namespace.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/postgres-pvc.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/postgres-deployment.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/mongo-pvc.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/mongo-deployment.yml"
          sh "./kubectl --kubeconfig=${KUBECONFIG_FILE} apply -f ci_cd/K8s/app-deployment.yml"
        }
      }
    }

    //stage('Build Docker Image PIPELINE') {
    //  steps {
    //    script {
    //      docker.build('komapolson/emais-app:latest')
    //    }
    //  }
    //}
    //stage('Push Docker Image') {
    //  steps {
    //    script {
    //      withDockerRegistry([credentialsId: DOCKER_CREDS, url: 'https://index.docker.io/v1/']) {
    //        docker.image('komapolson/emais-app:latest').push('latest')
    //      }
    //    }
    //  }
    //}

    //stage('Docker image remove') {
    //  steps {
    //    script {
    //      sh "docker rmi komapolson/emais-app:latest || true"
    //    }
    //  }
    //}
  }
  post {
    always {
      cleanWs()
    }
  }
}
